@using Backend.Models
@rendermode InteractiveServer
<div>

    <div class="max-w-sm w-full bg-amber-700 border border-gray-200 rounded-lg shadow-sm dark:bg-grey-800 dark:border-grey-700">

        <div class="relative group w-full">
            <figure class="w-full">
                @if (FileDataUrl == null)
                {
                     <p>Loading image...</p>
                }
                else
                {
                    <img src="@FileDataUrl" alt="@imageAlt" class="w-full object-cover rounded-lg shadow-md" />
                }
            </figure>

            <button @onclick="ToggleVisibility" class="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-4 py-2 rounded-lg opacity-0 group-hover:opacity-100 w-full">
                Click Me
            </button>
        </div>

    </div>


    @if (!isHidden)
    {
        <div class="w-full max-w-sm pt-4 bg-gray-200">
            <h1 class="text-xl font-bold text-center">@Clothing.Name</h1>
            <div class="w-full">
                <ul class="w-full space-y-2">
                    <li class="bg-gray-200 p-2 rounded-lg w-full">Category: @Clothing.Category</li>
                    <li class="bg-gray-200 p-2 rounded-lg w-full">Colour: @Clothing.Colour</li>
                    <li class="bg-gray-200 p-2 rounded-lg w-full">Season: @Clothing.Season</li>
                    <li class="bg-gray-200 p-2 rounded-lg w-full">Occasion: @Clothing.Occasion</li>
                    <li class="bg-gray-200 p-2 rounded-lg w-full">Brand: @Clothing.Brand</li>
                </ul>
            </div>
        </div>
    }

</div>

<style>
    .item-container{
        width: 10rem;
        height: auto;
    }
</style>

@code {

    private bool isHidden { get; set; } = true;

    [Parameter]
    public ClothingItem Clothing { get; set; }

    public string FileDataUrl { get; set; }
    
    string imageAlt = string.Empty;
    
    private async Task ToggleVisibility()
    {
        isHidden = !isHidden;
        StateHasChanged();
    }

    protected async override Task OnParametersSetAsync()
    {

        try
        {
            var response = await HttpManager.GetClothingImageById(Clothing.ImageId);
            if (response.HasError)
            {
                Console.WriteLine($"Failed to get the image  {response.StatusCode.ToString()}: {response.ErrorMessage}");

                imageAlt = $"{response.StatusCode.ToString()}: {response.ErrorMessage}";
            }
            else
            {
                FileDataUrl = response.ResponseObject;
                // Console.WriteLine("Image Base64 string " + FileDataUrl);
                imageAlt = Clothing.Name;
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            imageAlt = $"{e.Message}";
        }
    }

}

