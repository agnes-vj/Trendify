@using Backend.Models.Enums;
@using FrontEnd.Components.Utils

<div class="container h-full flex flex-row space-x-4">
    <Filter TEnum="ClothingCategory" DropdownValueString="@CategoryString" DropdownLabel="Category" Query="Query" ChangeFilterQuery="ChangeFilterQuery" DropdownClicked="@DropdownClicked" ChangeDropdownClicked="ChangeDropdownClicked" />
    <Filter TEnum="ClothingSize" DropdownLabel="Size" Query="Query" ChangeFilterQuery="ChangeFilterQuery" DropdownClicked="@DropdownClicked" ChangeDropdownClicked="ChangeDropdownClicked" />
    <Filter TEnum="Occasion" DropdownLabel="Occasion" Query="Query" ChangeFilterQuery="ChangeFilterQuery" DropdownClicked="@DropdownClicked" ChangeDropdownClicked="ChangeDropdownClicked" />
    <Filter TEnum="Season" DropdownLabel="Season" Query="Query" ChangeFilterQuery="ChangeFilterQuery" DropdownClicked="@DropdownClicked" ChangeDropdownClicked="ChangeDropdownClicked" />
    <button type="button" @onclick="ResetQuery"
    class="ml-[5rem] h-full text-white bg-stone-400 font-medium rounded-full text-sm
                 hover:bg-stone-500  px-5 text-center inline-flex items-center">
        Reset filters
    </button>
</div>

@code {
    [Parameter]
    public Query Query { get; set; } = new();

    [Parameter]
    public EventCallback<Query> ChangeFilterQuery { get; set; }

    private string CategoryString { get; set; } = "-";

    public string? DropdownClicked { get; set; }

    private void ChangeDropdownClicked(string label) => DropdownClicked = label;

    private async Task ResetQuery()
    {
        Query = new();
        CategoryString = "-";
        await ChangeFilterQuery.InvokeAsync(Query);
    }
}
