@using Backend.Models.Enums
@typeparam TEnum

<div class="flex flex-col relative h-full">

    <!--Button-->
    <button @onclick="() => ToggleDropdownClicked()"
            id="@DropdownLabel" 
            class="h-full 
                        text-white 
                        bg-stone-400 
                        hover:bg-stone-500 
                        font-medium 
                        rounded-xl 
                        text-sm 
                        px-5 
                        text-center 
                        inline-flex 
                        items-center" 
            type="button">

        @DropdownLabel: @DropdownValue

        <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
        </svg>
    </button>

    <!--Dropdown Hidden/Visible-->
    <div @onclick:stopPropagation="true" id="Category-dropdown" class="z-10 absolute left-0 mt-2 @(DropdownClicked ? "" : "hidden") bg-gray-100 divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700 filter-dropdowns">
        <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">

            @{
                int index = 0;
            }

            @foreach (var option in EnumValues)
            {
                string queryOptionButton = DropdownLabel + "=" + DropdownValue;

                string inputID = queryOptionButton + "Input";
                string labelID = queryOptionButton + "Label";

                <li tabindex="-1" @onblur=UnclickDropdown>
                    <input type="radio" id="@inputID" name="@DropdownLabel" class="hidden" @bind="@DropdownValue">

                    <label id="@labelID" 
                    for="@inputID"
                    @onclick="() => HandleFilterButtonClick()"
                    class="common-style">
                        @option
                    </label>
                </li>

                index++;
            }
        </ul> 
    </div>

</div>


<style>
    .common-style {
    display: block;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    cursor: pointer;
    }

    .common-style:hover {
    background-color: #505661;
    }

    .active {
    background-color: #005866;
    }

    .nonActive {
    background-color: #6B7280;
    }
</style>

@code {
    [Parameter]
    public EventCallback<string> ChangeFilterQuery { get; set; }

    [Parameter]
    public string? DropdownLabel { get; set; }

    private TEnum? DropdownValue { get; set; }

    private bool DropdownClicked { get; set; }

    private List<TEnum> EnumValues { get => Enum.GetValues(typeof(TEnum)).Cast<TEnum>().ToList(); }

    private string? QueryString { get => DropdownValue is null ? null : $"{DropdownLabel}={Convert.ToInt32(DropdownValue)}"; }

    private void UnclickDropdown() => DropdownClicked = false;

    private void ToggleDropdownClicked() => DropdownClicked = !DropdownClicked;

    private void HandleFilterButtonClick() {
        ChangeFilterQuery.InvokeAsync(QueryString);
        UnclickDropdown();
    }

}
