@using Backend.Models.Enums
@using FrontEnd.Components.Utils
@using FrontEnd
@inject IJSRuntime JSRuntime
@typeparam TEnum where TEnum : Enum

<div class="flex flex-col relative h-full">

    <!--Button-->
    <button @onclick="ToggleDropdownClicked"
            id="@("btn" + DropdownLabel)"
            class="category-filter-button h-full
                        text-white
                        bg-stone-400
                        hover:bg-stone-500
                        font-medium
                        rounded-full
                        text-sm
                        px-5
                        text-center
                        inline-flex
                        items-center"
            type="button">

        @DropdownLabel: @DropdownEnumWrapper

        <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
        </svg>
    </button>

    <!--Dropdown Hidden/Visible-->
    <div @ref="DropdownRef" id="@("dropdown" + DropdownLabel)" class="z-10 absolute left-0 mt-3 @(GetHidden()) bg-gray-100 divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700 filter-dropdowns">
        <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">

            @for (var i = 0; i < EnumValues.Count; i++)
            {
                string label = EnumValues[i];
                string queryOptionButton = DropdownLabel + "=" + EnumValues[i];

                string inputID = "input" + DropdownLabel;
                string labelID = "label" + DropdownLabel;

                <li tabindex="-1">
                    <input type="radio" id="@inputID" name="@DropdownLabel" class="hidden">

                    <label id="@labelID"
                    for="@inputID"
                    @onclick="() => HandleFilterButtonClick(label)"
                    class="common-style">
                        @EnumValues[i]
                    </label>
                </li>
            }
        </ul>
    </div>

</div>


<style>
    .common-style {
    display: block;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    cursor: pointer;
    }

    .common-style:hover {
    background-color: #505661;
    }

    .active {
    background-color: #005866;
    }

    .nonActive {
    background-color: #6B7280;
    }
</style>

@code {
    [Parameter]
    public EventCallback<Query> ChangeFilterQuery { get; set; }

    [Parameter]
    public string DropdownLabel { get; set; } = "Category";

    [Parameter]
    public Query Query { get; set; } = new();

    [Parameter]
    public EventCallback<string?> ChangeDropdownClicked { get; set; }

    [Parameter]
    public string? DropdownClicked { get; set; } = null;

    private ElementReference DropdownRef;

    private async Task<bool> GetDropdownHidden() =>  await JSRuntime.InvokeAsync<bool>("isHidden", new object[] { DropdownRef }); 

    private EnumWrapper<TEnum> DropdownEnumWrapper { get; set; } = new();

    private string DropdownValueString { get; set; } = "-";

    private List<string> EnumValues { get => DropdownEnumWrapper.StringValues; }

    private async Task UnclickDropdown() => await ChangeDropdownClicked.InvokeAsync(null);

    private async Task ToggleDropdownClicked() {
        if (DropdownClicked == DropdownLabel) 
        {
            await ChangeDropdownClicked.InvokeAsync(null);
        }
        else 
        {
            await ChangeDropdownClicked.InvokeAsync(DropdownLabel);
        }
    }

    private async Task HandleFilterButtonClick(string key)
    {
        DropdownEnumWrapper = new(DropdownLabel, key);
        Query.SetQueryParameter(DropdownLabel, DropdownEnumWrapper.QueryString);
        await ChangeFilterQuery.InvokeAsync(Query);
        await UnclickDropdown();
    }

    private async Task HandleFocusOut() {
        await JSRuntime.InvokeVoidAsync("consoleLog", null);
    }

    private string GetHidden() {
        if (DropdownClicked == DropdownLabel)
        {
            return "";
        }
        return "hidden";
    }

}
