@using Backend.Models.Enums

<div class="container w-full h-8 flex flex-row items-center justify-center mt-8 space-x-4">

    @foreach(var filterKeyValue in dropdownStates)
    {
        <div class="flex flex-col relative h-full">

            <!--Button-->
            <button 
            @onclick="() => ToggleDropdownStates(filterKeyValue.Key)" 
            id="@filterKeyValue.Key" 
            class="h-full 
                        text-white 
                        bg-stone-400 
                        hover:bg-stone-500 
                        font-medium 
                        rounded-xl 
                        text-sm 
                        px-5 
                        text-center 
                        inline-flex 
                        items-center" 
            type="button">

                @filterKeyValue.Key:&nbsp;@switch (filterKeyValue.Key)
                {
                    case "Category":
                        <span>@SelectedCategory</span>
                        break;
                    case "Size":
                        <span>@SelectedSize</span>
                        break;
                    case "Season":
                        <span>@SelectedSeason</span>
                        break;
                    case "Occasion":
                        <span>@SelectedOccasion</span>
                        break;
                }

                <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
                </svg>
            </button>

            <!--Dropdown Hidden/Visible-->
            <div @onclick:stopPropagation="true" id="Category-dropdown" class="z-10 absolute left-0 mt-2 @(dropdownStates[filterKeyValue.Key] ? "" : "hidden") bg-gray-100 divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700 filter-dropdowns">
                <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">

                    @{
                        int index = 0;
                    }

                    @foreach (var option in GetEnumValues(filterKeyValue.Key))
                    {
                        string queryOptionButton = filterKeyValue.Key.ToLower() + "=" + index;

                        string inputID = queryOptionButton + "Input";
                        string labelID = queryOptionButton + "Label";

                        <li tabindex="-1" @onfocusout=HideAllDropdowns>
                            <input type="radio" id="@inputID" name="@filterKeyValue.Key" class="hidden" @bind="@radioBoxActiveButtons[filterKeyValue.Key]">

                            <label id="@labelID" 
                            for="@inputID"
                            @onclick="() => HandleFilterButtonClick(queryOptionButton, (int)option, filterKeyValue.Key)"
                            class="common-style @(radioBoxActiveButtons[filterKeyValue.Key] == string.Empty ? "nonActive" : "active")">
                                @option
                            </label>
                        </li>

                        index++;
                    }
                </ul> 
            </div>

        </div>
    }

</div>

<style>
    .common-style {
    display: block;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    cursor: pointer;
    }

    .common-style:hover {
    background-color: #505661;
    }

    .active {
    background-color: #005866;
    }

    .nonActive {
    background-color: #6B7280;
    }
</style>

@code {
    [Parameter]
    public EventCallback<string> ChangeFilterQuery { get; set; }

    private Dictionary<string, bool> dropdownStates = new()
    {
        {"Category", false },
        {"Size", false },
        {"Season", false },
        {"Occasion", false }
    };

    private ClothingCategory SelectedCategory { get; set; }
    private ClothingSize SelectedSize { get; set; }
    private Season SelectedSeason { get; set; }
    private Occasion SelectedOccasion { get; set; }

    private Dictionary<string, string> radioBoxActiveButtons = new();

    protected override void OnInitialized() {
        radioBoxActiveButtons = new()
        {
            {"Category", string.Empty },
            {"Size", string.Empty },
            {"Season", string.Empty },
            {"Occasion", string.Empty }
        };
    }

    private void HideAllDropdowns() {
        foreach (var (key, value) in dropdownStates) {
            dropdownStates[key] = false;
        }
    }

    private void HandleFilterButtonClick(string queryOptionButton, int option, string filterKey) {
        ChangeFilterQuery.InvokeAsync(queryOptionButton);
        radioBoxActiveButtons[filterKey] = option.ToString();

        if (filterKey == "Category") 
        {
            SelectedCategory = (ClothingCategory)option;
        }
        else if (filterKey == "Size")
        {
            SelectedSize = (ClothingSize)option;
        }
        else if (filterKey == "Season") 
        {
            SelectedSeason = (Season)option;
        }
        else if (filterKey == "Occasion")
        {
            SelectedOccasion = (Occasion)option;
        }

        HideAllDropdowns();
    }

    private void ToggleDropdownStates(string key)
    {
        foreach(var keyValue in dropdownStates)
        {
            dropdownStates[keyValue.Key] = keyValue.Key == key ? !dropdownStates[keyValue.Key] : false;
        }
    }

    private Array GetEnumValues(string key) => key switch
    {
        "Category" => Enum.GetValues(typeof(ClothingCategory)),
        "Size" => Enum.GetValues(typeof(ClothingSize)),
        "Season" => Enum.GetValues(typeof(Season)),
        "Occasion" => Enum.GetValues(typeof(Occasion)),
        _ => throw new ArgumentException("Enum not recognised.")
    };

}
